buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
		maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
		classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

apply from: "https://gradle-files.u-team.info/default-project.gradle"

apply plugin: "net.minecraftforge.gradle"
apply plugin: "eclipse"
apply plugin: "com.matthewprenger.cursegradle"
apply plugin: "maven"

group = "info.u-team"
archivesBaseName = generateArchivesBaseName()
version = generateVersion()

sourceCompatibility = targetCompatibility = "1.8"

minecraft {
    mappings channel: config.forge.mapping_channel, version: config.forge.mapping
    accessTransformer = file("$rootDir/src/main/resources/META-INF/accesstransformer.cfg")
   
    runs {
        client = {
            workingDirectory project.file("run/client").canonicalPath
			mods {
                "${config.mod.modid}" {
                    source sourceSets.main
                }
				
				uteamtest {
                    source sourceSets.test
                }
            }
        }
        server = {
            workingDirectory project.file("run/server").canonicalPath
            mods {
                "${config.mod.modid}" {
                    source sourceSets.main
                }
				
				uteamtest {
                    source sourceSets.test
                }
            }
        }
        data = {
            workingDirectory project.file("run/data").canonicalPath
            args "--mod", config.mod.modid, "--all", "--output", "\"" + file("src/generated/resources").toString() + "\""
            mods {
                "${config.mod.modid}" {
                    source sourceSets.main
				}
			}
        }
        data_test = {
        	parents data
            workingDirectory project.file("run/data").canonicalPath
            args "--mod", "uteamtest", "--all", "--output", "\"" + file("src/generated_test/resources").toString() + "\"", "--validate", "--existing", "\"" + sourceSets.test.resources.srcDirs[0] + "\""
            mods {
                uteamtest {
                    source sourceSets.test
				}
			}
        }
    }
}

jar {
	classifier = ""

    from "LICENSE"
    from "src/repack/resources/LICENSE-DEPENDENCIES"
    
    exclude(".cache")  
    
   	manifest normalManifest
}

task deobfJar(type: Jar) {
	classifier = "dev"

    from sourceSets.main.output
    from "LICENSE"
    from "src/repack/resources/LICENSE-DEPENDENCIES"
    
    exclude(".cache")  
        
    manifest normalManifest
}

task sourcesJar(type: Jar) {
    classifier = "sources"
    
    from sourceSets.main.allJava
    from "LICENSE"
    from "src/repack/resources/LICENSE-DEPENDENCIES"
}

task docJar(type: Jar) {
    classifier = "javadoc"
    
    from javadoc
    from "LICENSE"
    from "src/repack/resources/LICENSE-DEPENDENCIES"
    
    tasks.withType(Javadoc) {
		options.addStringOption('Xdoclint:none', '-quiet')
		options.addStringOption('encoding', 'UTF-8')
		options.addStringOption('charSet', 'UTF-8')
	}
}

task testJar(type: Jar) {
	classifier = "test"

    from sourceSets.test.output
    from "LICENSE"
    
    exclude(".cache")
               
   	afterEvaluate {
	    reobf.create("testJar");
	    reobfTestJar.dependsOn createMcpToSrg
	    reobfTestJar.setMappings(createMcpToSrg.getOutput())
	    reobfTestJar.setClasspath(reobfTestJar.getClasspath().plus(files(jar)))   
	}
	                
    manifest normalManifest
}

task testDeobfJar(type: Jar) {
	classifier = "testdev"

    from sourceSets.test.output
    from "LICENSE"
    
    exclude(".cache")
                      
    manifest normalManifest
}

task testSourcesJar(type: Jar) {
    classifier = "testsources"
    
    from sourceSets.test.allJava
    from "LICENSE"
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives docJar
    archives jar
    archives testJar
    archives testDeobfJar
    archives testSourcesJar
}

signAllJars()

sourceSets {
   	main {
		java {
			srcDirs += "src/repack/java"
			srcDirs += "src/api/java"
			srcDirs += "src/integration/java"
		}
		resources {
			srcDirs += "src/repack/resources"
			srcDirs += "src/generated/resources"
		}
   	}
   	test {
		java
		resources {
			srcDirs += "src/generated_test/resources"
		}
   	}
}

dependencies {
    minecraft getForgeDependency()
    compile fg.deobf(getJeiApiDependency())
    runtime fg.deobf(getJeiDependency())
    compile fg.deobf(getPatchouliDependency())
}

curseforge {	
	afterEvaluate {
		tasks."curseforge${config.curse.id}".onlyIf {
			getValue("token") != null
		}
	}
	
	tasks.curseforge.dependsOn build
	
	apiKey = getValueDefault("token")
		
  	project {
    	id = config.curse.id
    	releaseType = config.curse.type

		addGameVersion config.forge.mcversion
		
		options {
		    forgeGradleIntegration = false
		}

		relations {
      		optionalDependency "jei"
    	}

    	mainArtifact(jar) {
      		displayName = "${config.curse.display}-${config.forge.mcversion}-${project.version}"
      		changelogType = "html"
      		changelog = "<a href=\"" + generateChangelogUrl() + "\">Changelog of ${project.version}</a>"
    	}
    	
    	addArtifact(deobfJar) {
    		displayName = "${config.curse.display}-${config.forge.mcversion}-${project.version}-dev"
    		changelogType = "text"
    		changelog = "Mappings: ${config.forge.mapping_channel}_${config.forge.mapping}"
    	}
  	}
}

uploadArchives {
	onlyIf {
		getValue("mavenpass") != null
	}

	tasks.uploadArchives.dependsOn build

	repositories {
		mavenDeployer {
			repository(url: "https://repo.u-team.info") {
				authentication(userName: "maven", password: getValue("mavenpass"))
			}
			pom {
				groupId = project.group
				artifactId = project.archivesBaseName
				version = project.version
				project {
					name project.archivesBaseName
					packaging "jar"
					description "${config.github.name}"
					url "https://github.com/MC-U-Team/${config.github.name}"
					scm {
						url "https://github.com/MC-U-Team/${config.github.name}"
						connection "scm:git:git://github.com/MC-U-Team/${config.github.name}.git"
						developerConnection "scm:git:git@github.com:MC-U-Team/${config.github.name}.git"
					}
					issueManagement {
						system "github"
						url "https://github.com/MC-U-Team/${config.github.name}/issues"
					}
					licenses {
						license {
							name "Apache License 2.0"
							url "https://github.com/MC-U-Team/${config.github.name}/blob/${config.github.branch}/LICENSE"
							distribution "repo"
						}
					}

					developers {
						developer {
							name "HyCraftHD"
						}
						developer {
							name "MrTroble"
						}
					}
				}
				setConfigurations(null) // Prevent all dependencies in the pom file
			}
		}
	}
}

task uploadBoth {
	tasks.uploadBoth.dependsOn build
	tasks.uploadBoth.dependsOn uploadArchives
	tasks.uploadBoth.dependsOn "curseforge${config.curse.id}"
	tasks.uploadBoth.dependsOn setBuildNumber
	doLast {
		println "Published both"
	}
}

gradle.taskGraph.whenReady {
	if (gradle.taskGraph.hasTask(":curseforge${config.curse.id}") || gradle.taskGraph.hasTask(":uploadArchives")) {
		validateBuild()
	}
}